{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 215, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-2.0-flash',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 236, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/schemas/legal-research.ts"],"sourcesContent":["import { z } from 'genkit';\n\nexport const CaseLawSchema = z.object({\n  caseName: z.string().describe('The name of the court case.'),\n  citation: z.string().describe('The legal citation for the case.'),\n  summary: z.string().describe('A brief summary of the case relevant to the research topic.'),\n});\n\nexport const StatuteSchema = z.object({\n  statuteName: z.string().describe('The name or number of the statute.'),\n  citation: z.string().describe('The legal citation for the statute.'),\n  summary: z.string().describe('A brief summary of the statute relevant to the research topic.'),\n});\n\nexport const LegalResearchInputSchema = z.object({\n  researchTopic: z\n    .string()\n    .min(1, { message: 'Research topic cannot be empty.' })\n    .describe('The specific legal topic or question to research.'),\n  caseContext: z\n    .string()\n    .optional()\n    .describe(\n      'Optional context about a specific case to tailor the research. This could include case facts, party names, or current procedural posture.'\n    ),\n});\nexport type LegalResearchInput = z.infer<typeof LegalResearchInputSchema>;\n\nexport const LegalResearchOutputSchema = z.object({\n  relevantCaseLaw: z\n    .array(CaseLawSchema)\n    .describe('A list of relevant case law, including citations and summaries.'),\n  relevantStatutes: z\n    .array(StatuteSchema)\n    .describe('A list of relevant statutes, including citations and summaries.'),\n  legalAnalysis: z\n    .string()\n    .describe(\n      'A concise legal analysis based on the research, addressing the input topic and context.'\n    ),\n});\nexport type LegalResearchOutput = z.infer<typeof LegalResearchOutputSchema>;\n"],"names":[],"mappings":";;;;;;AAAA;AAAA;;AAEO,MAAM,gBAAgB,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACpC,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC9B,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC9B,SAAS,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAC/B;AAEO,MAAM,gBAAgB,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACpC,aAAa,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACjC,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC9B,SAAS,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAC/B;AAEO,MAAM,2BAA2B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC/C,eAAe,uIAAA,CAAA,IAAC,CACb,MAAM,GACN,GAAG,CAAC,GAAG;QAAE,SAAS;IAAkC,GACpD,QAAQ,CAAC;IACZ,aAAa,uIAAA,CAAA,IAAC,CACX,MAAM,GACN,QAAQ,GACR,QAAQ,CACP;AAEN;AAGO,MAAM,4BAA4B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAChD,iBAAiB,uIAAA,CAAA,IAAC,CACf,KAAK,CAAC,eACN,QAAQ,CAAC;IACZ,kBAAkB,uIAAA,CAAA,IAAC,CAChB,KAAK,CAAC,eACN,QAAQ,CAAC;IACZ,eAAe,uIAAA,CAAA,IAAC,CACb,MAAM,GACN,QAAQ,CACP;AAEN","debugId":null}},
    {"offset": {"line": 272, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/legal-research-flow.ts"],"sourcesContent":["'use server';\n/**\n * @fileOverview A legal research assistant AI agent.\n * This file defines the Genkit flow for performing legal research.\n * It exports the `legalResearchAssistant` function and its associated input/output types.\n * The Zod schemas (LegalResearchInputSchema, LegalResearchOutputSchema) are defined and imported from '@/ai/schemas/legal-research.ts'.\n *\n * Exports:\n * - legalResearchAssistant: (input: LegalResearchInput) => Promise<LegalResearchOutput>\n * - LegalResearchInput: type\n * - LegalResearchOutput: type\n */\n\nimport { ai } from '@/ai/genkit';\nimport {\n  LegalResearchInputSchema,\n  LegalResearchOutputSchema,\n  type LegalResearchInput,\n  type LegalResearchOutput,\n} from '@/ai/schemas/legal-research';\n\n// Export the types as per the guideline\nexport type { LegalResearchInput, LegalResearchOutput };\n\nexport async function legalResearchAssistant(\n  input: LegalResearchInput\n): Promise<LegalResearchOutput> {\n  return legalResearchAssistantFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'legalResearchAssistantPrompt',\n  input: { schema: LegalResearchInputSchema },\n  output: { schema: LegalResearchOutputSchema },\n  prompt: `You are an expert legal research assistant. Your task is to provide comprehensive legal research based on the user's query.\n\nResearch Topic: {{{researchTopic}}}\n\n{{#if caseContext}}\nCase Context: {{{caseContext}}}\nPlease tailor your research to be relevant to this specific case context.\n{{/if}}\n\nIdentify and provide:\n1.  Relevant Case Law: Include the case name, full citation, and a brief summary of its relevance to the research topic.\n2.  Relevant Statutes: Include the statute name/number, full citation, and a brief summary of its relevance.\n3.  Legal Analysis: Provide a concise analysis synthesizing the findings from case law and statutes, directly addressing the research topic and incorporating the case context if provided.\n\nFocus on accuracy and relevance. Ensure citations are in a standard legal format.\n`,\n});\n\nconst legalResearchAssistantFlow = ai.defineFlow(\n  {\n    name: 'legalResearchAssistantFlow',\n    inputSchema: LegalResearchInputSchema,\n    outputSchema: LegalResearchOutputSchema,\n  },\n  async (input: LegalResearchInput) => {\n    const { output } = await prompt(input);\n    if (!output) {\n      throw new Error('No output from AI model for legal research.');\n    }\n    return output;\n  }\n);\n"],"names":[],"mappings":";;;;;AACA;;;;;;;;;;CAUC,GAED;AACA;;;;;;AAUO,eAAe,uCAAoB,GAApB,uBACpB,KAAyB;IAEzB,OAAO,2BAA2B;AACpC;AAEA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAE,QAAQ,yIAAA,CAAA,2BAAwB;IAAC;IAC1C,QAAQ;QAAE,QAAQ,yIAAA,CAAA,4BAAyB;IAAC;IAC5C,QAAQ,CAAC;;;;;;;;;;;;;;;AAeX,CAAC;AACD;AAEA,MAAM,6BAA6B,mHAAA,CAAA,KAAE,CAAC,UAAU,CAC9C;IACE,MAAM;IACN,aAAa,yIAAA,CAAA,2BAAwB;IACrC,cAAc,yIAAA,CAAA,4BAAyB;AACzC,GACA,OAAO;IACL,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,OAAO;IAChC,IAAI,CAAC,QAAQ;QACX,MAAM,IAAI,MAAM;IAClB;IACA,OAAO;AACT;;;IAxCoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 344, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 395, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/legal-research/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/legal-research/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/legal-research/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAmS,GAChU,iEACA","debugId":null}},
    {"offset": {"line": 409, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/legal-research/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/legal-research/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/legal-research/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA+Q,GAC5S,6CACA","debugId":null}},
    {"offset": {"line": 423, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}