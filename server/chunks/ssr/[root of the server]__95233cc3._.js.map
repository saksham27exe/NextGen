{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 215, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-2.0-flash',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 236, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/schemas/chatbot.ts"],"sourcesContent":["import { z } from 'genkit';\nimport type { PartData as MessagePart } from 'genkit/ai'; // Updated import for Genkit v1.x\n\n// Define a schema for a single message part (text for now)\nconst MessagePartSchema = z.object({\n  text: z.string().optional(),\n  // media could be added here if chatbot supports image inputs in the future\n});\n\n// Define a schema for a single message in the chat history\nconst ChatHistoryMessageSchema = z.object({\n  role: z.enum(['user', 'model']),\n  parts: z.array(MessagePartSchema),\n});\n\nexport const ChatbotInputSchema = z.object({\n  userQuery: z\n    .string()\n    .min(1, { message: 'Query cannot be empty.' })\n    .describe(\"The user's question or statement to the chatbot.\"),\n  caseContext: z\n    .string()\n    .optional()\n    .describe(\n      'Optional context about a specific case, e.g., case number or details relevant to the current page.'\n    ),\n  chatHistory: z\n    .array(ChatHistoryMessageSchema)\n    .optional()\n    .describe(\n      'Previous conversation history to maintain context. Each message has a role (\"user\" or \"model\") and parts (content).'\n    ),\n});\nexport type ChatbotInput = z.infer<typeof ChatbotInputSchema>;\n\nexport const ChatbotOutputSchema = z.object({\n  response: z\n    .string()\n    .describe(\"The chatbot's response to the user's query.\"),\n});\nexport type ChatbotOutput = z.infer<typeof ChatbotOutputSchema>;\n\n// Helper type for using in the frontend component, directly from Genkit's PartData\nexport type FrontendMessagePart = MessagePart;\n"],"names":[],"mappings":";;;;AAAA;AAAA;;AAGA,2DAA2D;AAC3D,MAAM,oBAAoB,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACjC,MAAM,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ;AAE3B;AAEA,2DAA2D;AAC3D,MAAM,2BAA2B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACxC,MAAM,uIAAA,CAAA,IAAC,CAAC,IAAI,CAAC;QAAC;QAAQ;KAAQ;IAC9B,OAAO,uIAAA,CAAA,IAAC,CAAC,KAAK,CAAC;AACjB;AAEO,MAAM,qBAAqB,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACzC,WAAW,uIAAA,CAAA,IAAC,CACT,MAAM,GACN,GAAG,CAAC,GAAG;QAAE,SAAS;IAAyB,GAC3C,QAAQ,CAAC;IACZ,aAAa,uIAAA,CAAA,IAAC,CACX,MAAM,GACN,QAAQ,GACR,QAAQ,CACP;IAEJ,aAAa,uIAAA,CAAA,IAAC,CACX,KAAK,CAAC,0BACN,QAAQ,GACR,QAAQ,CACP;AAEN;AAGO,MAAM,sBAAsB,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC1C,UAAU,uIAAA,CAAA,IAAC,CACR,MAAM,GACN,QAAQ,CAAC;AACd","debugId":null}},
    {"offset": {"line": 271, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/chatbot-flow.ts"],"sourcesContent":["'use server';\n/**\n * @fileOverview AI Chatbot flow for Nextgen-Ecourt.\n *\n * - askChatbot - A function that handles user queries to the chatbot.\n * - ChatbotInput - The input type for the askChatbot function.\n * - ChatbotOutput - The return type for the askChatbot function.\n */\n\nimport { ai } from '@/ai/genkit';\nimport type { MessageData, PartData } from 'genkit/ai';\nimport {\n  ChatbotInputSchema,\n  ChatbotOutputSchema,\n  type ChatbotInput,\n  type ChatbotOutput,\n} from '@/ai/schemas/chatbot';\n\nexport type { ChatbotInput, ChatbotOutput };\n\nexport async function askChatbot(\n  input: ChatbotInput\n): Promise<ChatbotOutput> {\n  return chatbotFlow(input);\n}\n\nconst systemInstruction = `You are an AI Legal Assistant for Nextgen-Ecourt, a digital judiciary management platform.\nYour role is to assist users (lawyers, plaintiffs, defendants, judges, court officials) with their queries.\nBe polite, professional, and provide clear, concise information.\n\nYou can help with the following:\n- Answering questions about case status (e.g., \"What is the status of my case ABC123?\")\n- Providing hearing dates (e.g., \"When is the next hearing for case XYZ?\")\n- Explaining legal terms (e.g., \"What does 'summon' mean in court?\")\n- Guiding on document uploads (e.g., \"How can I upload documents for my case?\")\n- Summarizing a case if details are provided (e.g., \"Give me a summary of case DEF456. It involves...\")\n- Explaining court processes (e.g., \"What is the next step after filing a case?\")\n\nIf you need specific information like a case number to answer a question, politely ask the user to provide it.\nIf a query is outside your scope of legal/court assistance, politely state that you cannot help with that topic.\nDo not provide legal advice, only legal information and procedural guidance relevant to the Nextgen-Ecourt platform.\nUse the provided chat history and case context to maintain context in the conversation.\n`;\n\nconst chatbotFlow = ai.defineFlow(\n  {\n    name: 'chatbotFlow',\n    inputSchema: ChatbotInputSchema,\n    outputSchema: ChatbotOutputSchema,\n  },\n  async (input: ChatbotInput) => {\n    const effectiveHistory = input.chatHistory ? [...input.chatHistory] : [];\n\n    // If the history only contains the initial bot greeting,\n    // remove it so the LLM prompt starts with System -> User (current query).\n    if (\n      effectiveHistory.length === 1 &&\n      effectiveHistory[0].role === 'model' &&\n      effectiveHistory[0].parts[0]?.text?.includes(\n        \"Hello! I'm the Nextgen-Ecourt Legal Assistant\"\n      )\n    ) {\n      effectiveHistory.shift(); // Remove the greeting\n    }\n\n    const messagesForPrompt: MessageData[] = [];\n\n    // Add system instruction as the first message.\n    messagesForPrompt.push({\n      role: 'system',\n      content: [{ text: systemInstruction }],\n    });\n\n    // Add processed (actual) conversation history.\n    effectiveHistory.forEach((msg) => {\n      const validParts: PartData[] = msg.parts\n        .map((p) => ({ text: p.text || '' }))\n        .filter((p) => p.text); // Ensure parts are not empty\n      if (validParts.length > 0) {\n        messagesForPrompt.push({ role: msg.role, content: validParts });\n      }\n    });\n\n    // Add current user query, including case context if available.\n    let currentUserQueryText = input.userQuery;\n    if (input.caseContext) {\n      currentUserQueryText += `\\n\\nRelevant Case Context: ${input.caseContext}`;\n    }\n    messagesForPrompt.push({\n      role: 'user',\n      content: [{ text: currentUserQueryText }],\n    });\n\n    // At this point, messagesForPrompt should be structured like:\n    // [System, (alternating User/Model from actual past convo...), User (current query)]\n    // This ensures that after the System message, the conversation sequence for the LLM\n    // starts with a User message or is empty if no prior *actual* conversation occurred.\n\n    const llmResponse = await ai.generate({\n      prompt: { messages: messagesForPrompt }, // Pass the constructed array of MessageData within a 'messages' object\n      output: {\n        format: 'text',\n      },\n      // config: { temperature: 0.3 } // Optional: adjust creativity\n    });\n\n    const responseText = llmResponse.text;\n    if (responseText === undefined || responseText === null) {\n      throw new Error('AI model did not return a text response.');\n    }\n    return { response: responseText };\n  }\n);\n\n"],"names":[],"mappings":";;;;;AACA;;;;;;CAMC,GAED;AAEA;;;;;;AASO,eAAe,uCAAQ,GAAR,WACpB,KAAmB;IAEnB,OAAO,YAAY;AACrB;AAEA,MAAM,oBAAoB,CAAC;;;;;;;;;;;;;;;;AAgB3B,CAAC;AAED,MAAM,cAAc,mHAAA,CAAA,KAAE,CAAC,UAAU,CAC/B;IACE,MAAM;IACN,aAAa,+HAAA,CAAA,qBAAkB;IAC/B,cAAc,+HAAA,CAAA,sBAAmB;AACnC,GACA,OAAO;IACL,MAAM,mBAAmB,MAAM,WAAW,GAAG;WAAI,MAAM,WAAW;KAAC,GAAG,EAAE;IAExE,yDAAyD;IACzD,0EAA0E;IAC1E,IACE,iBAAiB,MAAM,KAAK,KAC5B,gBAAgB,CAAC,EAAE,CAAC,IAAI,KAAK,WAC7B,gBAAgB,CAAC,EAAE,CAAC,KAAK,CAAC,EAAE,EAAE,MAAM,SAClC,kDAEF;QACA,iBAAiB,KAAK,IAAI,sBAAsB;IAClD;IAEA,MAAM,oBAAmC,EAAE;IAE3C,+CAA+C;IAC/C,kBAAkB,IAAI,CAAC;QACrB,MAAM;QACN,SAAS;YAAC;gBAAE,MAAM;YAAkB;SAAE;IACxC;IAEA,+CAA+C;IAC/C,iBAAiB,OAAO,CAAC,CAAC;QACxB,MAAM,aAAyB,IAAI,KAAK,CACrC,GAAG,CAAC,CAAC,IAAM,CAAC;gBAAE,MAAM,EAAE,IAAI,IAAI;YAAG,CAAC,GAClC,MAAM,CAAC,CAAC,IAAM,EAAE,IAAI,GAAG,6BAA6B;QACvD,IAAI,WAAW,MAAM,GAAG,GAAG;YACzB,kBAAkB,IAAI,CAAC;gBAAE,MAAM,IAAI,IAAI;gBAAE,SAAS;YAAW;QAC/D;IACF;IAEA,+DAA+D;IAC/D,IAAI,uBAAuB,MAAM,SAAS;IAC1C,IAAI,MAAM,WAAW,EAAE;QACrB,wBAAwB,CAAC,2BAA2B,EAAE,MAAM,WAAW,EAAE;IAC3E;IACA,kBAAkB,IAAI,CAAC;QACrB,MAAM;QACN,SAAS;YAAC;gBAAE,MAAM;YAAqB;SAAE;IAC3C;IAEA,8DAA8D;IAC9D,qFAAqF;IACrF,oFAAoF;IACpF,qFAAqF;IAErF,MAAM,cAAc,MAAM,mHAAA,CAAA,KAAE,CAAC,QAAQ,CAAC;QACpC,QAAQ;YAAE,UAAU;QAAkB;QACtC,QAAQ;YACN,QAAQ;QACV;IAEF;IAEA,MAAM,eAAe,YAAY,IAAI;IACrC,IAAI,iBAAiB,aAAa,iBAAiB,MAAM;QACvD,MAAM,IAAI,MAAM;IAClB;IACA,OAAO;QAAE,UAAU;IAAa;AAClC;;;IA3FoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 388, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 439, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/cases/%5Bid%5D/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/cases/[id]/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/cases/[id]/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA+R,GAC5T,6DACA","debugId":null}},
    {"offset": {"line": 453, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/cases/%5Bid%5D/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/cases/[id]/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/cases/[id]/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA2Q,GACxS,yCACA","debugId":null}},
    {"offset": {"line": 467, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}